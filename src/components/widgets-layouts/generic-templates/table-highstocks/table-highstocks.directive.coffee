#
# Component generated by Impac! Widget Generator!
#
module = angular.module('impac.components.widgets-layouts.table-highstocks', [])
module.controller('WidgetTableHighstocksCtrl', ($scope, $q, $filter, $timeout, ImpacWidgetsSvc, HighchartsFactory) ->

  w = $scope.widget

  # Define settings
  # --------------------------------------
  $scope.orgDeferred = $q.defer()
  $scope.timePeriodDeferred = $q.defer()

  settingsPromises = [
    $scope.orgDeferred.promise
    $scope.timePeriodDeferred.promise
  ]

  # Configure the commonTimePeriodInfo directive
  $scope.timePeriodInfoParams = {
    accountingBehaviour: 'pnl'
    histParams: {}
  }

  # Widget specific methods
  # --------------------------------------
  w.initContext = ->
    $scope.table = _.get(w, 'content.table', {})
    return unless $scope.isDataFound = !_.isEmpty($scope.table.rows)
    $scope.currency = _.get(w, 'metadata.currency')
    $scope.collapsed = _.get(w, 'metadata.collapsed') || []
    $scope.selectedElements = _.get(w, 'metadata.selected_elements') || []
    $scope.timePeriodInfoParams.histParams = _.get(w, 'metadata.hist_parameters', {})
    return

  $scope.onToggleCollapsed = ({ collapsed }) ->
    $scope.collapsed = collapsed
    ImpacWidgetsSvc.updateWidgetSettings(w, false)

  $scope.onRowClick = ({ id, $element }) ->
    if $scope.isSelected(id)
      _.remove($scope.selectedElements, (e)-> e == id)
    else
      $scope.selectedElements.push(id)
    ImpacWidgetsSvc.updateWidgetSettings(w)

  $scope.linkRowToSerie = ({ row }) ->
    _.find($scope.chart.series, (s) -> (s.id || s.options && s.options.id) == row.id) if $scope.chart?

  $scope.isSelected = (id) ->
    _.include($scope.selectedElements, id)

  $scope.hasElements = ->
    !_.isEmpty($scope.selectedElements) && (w.width = 12)

  # Unique identifier for the chart object in the DOM
  $scope.chartId = ->
    "profitAndLossChart-#{w.id}"

  # Executed after the widget and its settings are initialised and ready
  w.format = ->
    $timeout ->
      return unless $scope.hasElements()
      opts = _.merge(
        w.content.highstocks,
        HighchartsFactory.formatters($scope.currency),
        HighchartsFactory.addXAxisOptions({ defaults: w.metadata.xAxis, callback: onZoom })
      )
      $scope.chart = Highcharts.stockChart($scope.chartId(), opts)

  # Persists the zooming options on user selection (call to MnoHub to update the metadata)
  onZoom = (event) ->
    zoomMetadata = angular.merge w.metadata, {
      xAxis:
        max: event.max
        min: event.min
    }
    unless updateLocked
      updateLocked = true
      $timeout ->
        ImpacWidgetsSvc.update(w, { metadata: zoomMetadata }, false).finally(-> updateLocked = false)
      , 1000

  # Mini-settings objects
  # --------------------------------------
  #
  # handles the saving of collapsed / uncollapsed list groups.
  collapsedSetting = {}
  collapsedSetting.initialized = false

  collapsedSetting.initialize = ->
    collapsedSetting.initialized = true

  collapsedSetting.toMetadata = ->
    { collapsed: $scope.collapsed }

  w.settings.push(collapsedSetting)

  # handles the saving of selected table elements to be displayed on the highstocks chart.
  selectedElementsSetting = {}
  selectedElementsSetting.initialized = false

  selectedElementsSetting.initialize = ->
    selectedElementsSetting.initialized = true

  selectedElementsSetting.toMetadata = ->
    { selected_elements: $scope.selectedElements }

  w.settings.push(selectedElementsSetting)

  # Widget is ready: can trigger the "wait for settings to be ready"
  # --------------------------------------
  $scope.widgetDeferred.resolve(settingsPromises)
)
module.directive('widgetTableHighstocks', ->
  return {
    restrict: 'A',
    controller: 'WidgetTableHighstocksCtrl'
  }
)
