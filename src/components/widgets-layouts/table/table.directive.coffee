#
# Component generated by Impac! Widget Generator!
#
module = angular.module('impac.components.widgets-layouts.table', [])
module.controller('WidgetTableCtrl', ($scope, $q, $filter, ImpacWidgetsSvc) ->

  w = $scope.widget

  # Define settings
  # --------------------------------------
  $scope.orgDeferred = $q.defer();
  $scope.timePeriodDeferred = $q.defer()

  settingsPromises = [
    $scope.orgDeferred.promise,
    $scope.timePeriodDeferred.promise
  ]

  # Configure the commonTimePeriodInfo directive
  $scope.timePeriodInfoParams = {
    accountingBehaviour: 'pnl'
    histParams: {}
  }

  # Widget specific methods
  # --------------------------------------
  w.initContext = ->
    $scope.table = _.get(w, 'content.table', {})
    return if _.isEmpty($scope.table.rows)
    $scope.currency = _.get(w, 'metadata.currency')
    $scope.timePeriodInfoParams.histParams = _.get(w, 'metadata.hist_parameters', {})
    $scope.unCollapsed = _.get(w, 'metadata.unCollapsed') || []
    $scope.ascending = true
    $scope.sortedColumn = $scope.table.headers.cells[0]
    $scope.colSize = $scope.table.headers.cells.length
    $scope.colWidth = "#{100 / $scope.colSize}%"
    return

  $scope.cellValue = (v)->
    num = parseFloat(v)
    if _.isNumber(num) && !_.isNaN(num) then $filter('mnoCurrency')(v, $scope.currency) else v

  $scope.toggleCollapsed = (table, $event) ->
    $event.stopPropagation()
    id = table.headers.id
    return unless id?
    if _.find($scope.unCollapsed, ((name) -> id == name))
      $scope.unCollapsed = _.reject($scope.unCollapsed, (name) -> name == id)
    else
      $scope.unCollapsed.push(id)
    ImpacWidgetsSvc.updateWidgetSettings(w,false)

  $scope.isCollapsed = (table) ->
    id = table.headers.id
    return unless id?
    if _.find($scope.unCollapsed, ((name) -> id == name))
      return false
    else
      return true

  $scope.sort = (col, $index) ->
    if $scope.sortedColumn == col
      $scope.ascending = !$scope.ascending
    else
      $scope.ascending = true
      $scope.sortedColumn = col
    sortData($scope.table.rows, $index)

  sortData = (rows, colIndex)->
    rows.single = sortSingleRows(rows.single, colIndex) if rows.single
    if rows.grouped
      for table in rows.grouped
        sortData(table.rows, colIndex)
    return

  sortSingleRows = (rows, colIndex) ->
    _.sortByOrder(rows, ((r)-> r.cells[colIndex]), [$scope.ascending])

  # Mini-settings objects
  # handles the saving of collapsed / uncollapsed list groups.
  # --------------------------------------
  unCollapsedSetting = {}
  unCollapsedSetting.initialized = false

  unCollapsedSetting.initialize = ->
    unCollapsedSetting.initialized = true

  unCollapsedSetting.toMetadata = ->
    {unCollapsed: $scope.unCollapsed}

  w.settings.push(unCollapsedSetting)

  # Widget is ready: can trigger the "wait for settings to be ready"
  # --------------------------------------
  $scope.widgetDeferred.resolve(settingsPromises)
)
module.directive('widgetTable', ->
  return {
    restrict: 'A',
    controller: 'WidgetTableCtrl'
  }
)
module.directive('indentTableRow', ->
  return {
    restrict: 'A',
    link: (_$scope, $element) ->
      if $element.is(':first-child')
        # Get list of ancestor tables up until the root table
        ancestorTables = $element.closest('table').parentsUntil('#table-layout', 'table')
        # Indent <th> equal to the length of ancestors
        nestLevel = ancestorTables.get().length
        # Indent <td> equal to the length of ancestors plus 1
        nestLevel++ if $element.is('td')

        $element.css({ 'padding-left': "#{nestLevel * 20}px" })

      return
  }
)

